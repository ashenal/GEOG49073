---
title: "Lab1_Code"
author: "Andrew Shenal"
date: "2025-01-30"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

---
###Setup

Setup libraries
```{R Load Libraries}
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
```


Load Data
```{R Load Data}
#name files
p.counties <- "./data/County_Boundaries.shp"
p.stations <- "./data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"

#Read files in sf package
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)

# check for validity
d.stations %>% sf::st_is_valid()
d.counties %>% sf::st_is_valid() # returns false for one feature, so we need to fix

# fix it "in place"
d.counties <- d.counties %>% sf::st_make_valid()

```

### Task 1: Basic data manipulation

1.1 For each county, calculate its land area as percentage of the total area (land + water) for that state.

```{r echo=TRUE, message=TRUE}

d.counties %>% 
  mutate(., CntyTotArea = ALAND10 + AWATER10) %>%
  group_by(STATEFP10) %>%
  mutate(., StTotArea = sum(CntyTotArea)) %>% 
  mutate(., PcntLandArea = (ALAND10 / StTotArea)*100) %>% 
  arrange(STATEFP10)

```


1.2 For each state, find the county that has the largest proportion of its land as water (water area / total area)

```{r}

d.counties %>% 
  mutate(., TotArea = ALAND10 + AWATER10) %>% 
  mutate(., PropWater = (AWATER10 /TotArea)*100) %>% #Proportion water as a %
  group_by(STATEFP10) %>%
  slice_max(PropWater)

```

1.3 Count the number of counties in each state

```{r}
d.counties %>% 
  count(STATEFP10) #Counts the occurrences of each STATEFP10 in column "n"

```

1.4 Which station has the shortest name (STATION_NA) in the study area?

```{r}
d.stations %>% 
  nchar(STATION_NA)
  #slice_min(STATION_NA)

```

### Task 2: Plotting attribute data
...for each plot, label your axes properly and give your plot a title

2.1 Make a scatterplot showing the relationship between land area and water area for each county. Color each point using the state variable

```{r}
d.counties %>% 
  ggplot(., aes(x=ALAND10, y=AWATER10))+
  geom_point(aes(color = STATEFP10))+
  theme_bw() +
  labs(title = 'Land area compared to water area',
       subtitle = 'County scale',
       x = "Area of Land",
       y = 'Area of Water',
       color = 'State FIPS')

```

2.2 Make a histogram of drainage area (Drainage_A) for all monitoring stations

```{r}
d.stations %>% 
  ggplot(., aes(x=Drainage_A))+
  geom_histogram()+
  theme_bw() +
  labs(title = 'Drainage area of water monitoring stations',
       x = "Drainage Area",
       y = 'Number of stations')

```

2.3 Make a similar histogram of drainage area (Drainage_A) for all monitoring stations. This time, shade/color each portion of the histogram's bar(s) using the state variable

```{r}





d.stations %>% 
  ggplot(., aes(x=Drainage_A))+
  geom_histogram(aes(fill = STATEFP10)) +
  theme_bw() +
  labs(title = 'Drainage area of water monitoring stations',
       x = "Drainage Area",
       y = 'Number of stations')

```

### Task 3: Write a function
3.1 Write a function that does the following:

A. accepts a vector of arbitrary numbers, calculates the mean, median, maximum, and minimum of the vector

B. Sorts the vector

C. returns a list of those values from A and the sorted vector from B

D. the function should only work with numeric values and print an error message if any other data type are found

Test it with the following vectors

`c(1, 0, -1), c(10, 100, 1000), c(.1, .001, 1e8), c("a", "b", "c")`

```{r}

#Function
Task3 <- function(Vectors){
  if(is.numeric(Vectors) == TRUE)
  {return(list(
    Mean = mean(Vectors),
    Median = median(Vectors), 
    Maximum = max(Vectors), 
    Minimum = min(Vectors),
    orted = sort.default(Vectors)))}
  else{
    print("Error: Not numeric values")
    }}

#List of the vectors to test the function on
Vectors <-list(
  c(1, 0, -1),
  c(10, 100, 1000),
  c(.1, .001, 1e8),
  c("a", "b", "c"))

#Apply the function across the list
Vectors %>% purrr::map(., Task3)

```

### Task 4: (slightly) more complex spatial analysis. 
...Note, you may need to find supplementary data to help you with these tasks

4.1 Calculate the number of monitoring stations in each state

```{r}




```

4.2 Calculate the average size of counties in New York (that are also in this study area)

```{r}

```

4.3 Calculate which state has monitoring stations with the greatest average drainage area (Drainage_A)

```{r}

```

## Questions

1. In using the intersection functions, are the following two statements equivalent? If not, explain how. Be sure to think about BOTH the spatial data structures AND the attribute data. Would your answer be different if we were using different types of data?

```
 sf::st_intersection(d.stations, del.counties)
 sf::st_intersection(del.counties, d.stations)
```




2. What did you find challenging in this lab? What was new?





3. What types of activities would you like to see in labs this semester?



























