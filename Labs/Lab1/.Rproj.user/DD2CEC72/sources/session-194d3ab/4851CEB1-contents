---
title: "Lab1_Code"
author: "Andrew Shenal"
date: "2025-01-30"
output: html_document
---

```{r Rmd Setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

---
###Setup

Setup libraries
```{R Load Libraries}
library(tidyverse)
library(ggplot2)
library(sf)
```


Load Data
```{R Load Data}
#Code for initial loading of data from Lab 1 R markdown - Dr. Bitterman

#name files
p.counties <- "./data/County_Boundaries.shp"
p.stations <- "./data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"

#Read files in sf package
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)

# check for validity
d.stations %>% sf::st_is_valid()
d.counties %>% sf::st_is_valid() # returns false for one feature, so we need to fix

# fix it "in place"
d.counties <- d.counties %>% sf::st_make_valid()

```

### Task 1: Basic data manipulation

1.1 For each county, calculate its land area as percentage of the total area (land + water) for that state.

```{R 1.1,echo=TRUE, message=TRUE}

d.counties %>% 
  mutate(., CntyTotArea = ALAND10 + AWATER10) %>% #Find County total area
  group_by(STATEFP10) %>% #Group by state to get statewide calculations
  mutate(., StTotArea = sum(CntyTotArea)) %>% #Find state total area as a sum of all county areas in the state
  mutate(., PcntLandArea = (ALAND10 / StTotArea)*100) %>% #Calculate land as a percentage of total area for the state
  arrange(STATEFP10) %>% #Arrange so that all the counties in each state are together for easy viewing
  select(STATEFP10, COUNTYFP10, NAME10, CntyTotArea, StTotArea, PcntLandArea) #Select only necessary columns to view


```


1.2 For each state, find the county that has the largest proportion of its land as water (water area / total area)

```{r 1.2}

d.counties %>% 
  mutate(., TotArea = ALAND10 + AWATER10) %>% #Find total area of each county
  mutate(., PropWater = (AWATER10 /TotArea)*100) %>% #Find Proportion water as a % for each county
  group_by(STATEFP10) %>% #Group by state
  slice_max(PropWater) %>% #Find max for each state
  select(STATEFP10, NAME10, TotArea, PropWater) #Select necessary columns for viewing

```

1.3 Count the number of counties in each state

```{r 1.3}
d.counties %>% 
  count(STATEFP10) %>% #Counts the occurrences of each State FIPS from the list of counties in column "n"
  rename(Num_Counties = n) #Renames column "n"  to explain it is number of counties

```

1.4 Which station has the shortest name (STATION_NA) in the study area?

```{r 1.4}

d.stations %>% 
  mutate(., Name_Length = nchar(STATION_NA)) %>% #Create new column that counts number of characters in each name
  slice_min(Name_Length) %>% #Find the station with minimum name length (There's two with same length of 26)
  select(STATION_NA, Name_Length) #Select necessary columns for viewing

```

### Task 2: Plotting attribute data
...for each plot, label your axes properly and give your plot a title

2.1 Make a scatterplot showing the relationship between land area and water area for each county. Color each point using the state variable

```{r 2.1}
d.counties %>% 
  ggplot(., aes(x=ALAND10, y=AWATER10))+
  geom_point(aes(color = STATEFP10))+
  theme_bw() +
  labs(title = 'Land area compared to water area',
       subtitle = 'County scale',
       x = "Area of Land",
       y = 'Area of Water',
       color = 'State FIPS')

```

2.2 Make a histogram of drainage area (Drainage_A) for all monitoring stations

```{r}
d.stations %>% 
  ggplot(., aes(x=Drainage_A))+
  geom_histogram(bins = 30, color = 'white', fill = 'blue')+
  theme_bw() +
  labs(title = 'Drainage area of water monitoring stations',
       x = "Drainage Area",
       y = 'Number of Stations')

```

2.3 Make a similar histogram of drainage area (Drainage_A) for all monitoring stations. This time, shade/color each portion of the histogram's bar(s) using the state variable

```{r}

#The d.stations data does not have a state variable so I spatially joined the two datasets to easily retrieve the matching states. 
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)


Stations_Joined %>% 
  ggplot(., aes(x=Drainage_A, fill = STATEFP10))+
  geom_histogram() +
  theme_bw() +
  labs(title = 'Drainage area of water monitoring stations',
       x = "Drainage Area",
       y = 'Number of Stations')

```

### Task 3: Write a function
3.1 Write a function that does the following:

A. accepts a vector of arbitrary numbers, calculates the mean, median, maximum, and minimum of the vector

B. Sorts the vector

C. returns a list of those values from A and the sorted vector from B

D. the function should only work with numeric values and print an error message if any other data type are found

Test it with the following vectors

`c(1, 0, -1), c(10, 100, 1000), c(.1, .001, 1e8), c("a", "b", "c")`

```{r}

#Function
Task3 <- function(Vectors){
  if(is.numeric(Vectors) == TRUE)
  {return(list(
    Mean = mean(Vectors),
    Median = median(Vectors), 
    Maximum = max(Vectors), 
    Minimum = min(Vectors),
    Sorted = sort(Vectors)))}
  else{
    return("Error: Not numeric values")
    }}

#List of the vectors to test the function on
Vectors <-list(
  c(1, 0, -1),
  c(10, 100, 1000),
  c(.1, .001, 1e8),
  c("a", "b", "c"))

#Apply the function across the list
Vectors %>% purrr::map(., Task3)

```

### Task 4: (slightly) more complex spatial analysis. 
...Note, you may need to find supplementary data to help you with these tasks

4.1 Calculate the number of monitoring stations in each state

```{r}

Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects) #Spatially join data to get states column

Stations_Joined %>% count(STATEFP10) #Count the occurrences of each state

```

4.2 Calculate the average size of counties in New York (that are also in this study area)

```{r}
# I used Google to find New York State's FIPS code of 36
d.counties %>% 
  filter(., STATEFP10 == 36) %>% 
  st_area() %>%
  mean()


```

4.3 Calculate which state has monitoring stations with the greatest average drainage area (Drainage_A)

```{r}

Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects) #Join data again

Stations_Joined %>% 
  group_by(STATEFP10) %>% #Group to do calculations across each state
  mutate(., AvgDrainArea = mean(Drainage_A)) %>% #Average drainage area calculation 
  arrange(desc(AvgDrainArea)) %>% #Arrange by descending states with biggest drainage areas are on top
  head() #Get first few results to show greatest values

# Result: State 42 (Pennsylvania) has the greatest average drainage area of 3583.61


```

## Questions

1. In using the intersection functions, are the following two statements equivalent? If not, explain how. Be sure to think about BOTH the spatial data structures AND the attribute data. Would your answer be different if we were using different types of data?

```
 sf::st_intersection(d.stations, del.counties)
 sf::st_intersection(del.counties, d.stations)
```

```{r}
# No they are not equivalent. The first one would select the points of stations that intersect with the counties in Delaware. Alternatively, the second would select the polygons of Delaware counties that intersect with any stations. 

# Also, the first would leave with the attributes from the stations with county information added on. While the second would leave you with the attributes of the selected Delaware counties and the station information joined to that. Both impact what data you're essentially dropping. One example of this being important is if there were more than one station in a county  and you used the second statement. Your result would incorrectly only show one station in the county.

# The two statements will always be different even with other vector data as the order changes what geometry is left. However, if the data has one-to-one matches spatially then the attribute data would not change from the order of variables. 

```


2. What did you find challenging in this lab? What was new?

```{r}
# I found the creation of the function most challenging. I am most unfamiliar with creating functions and applying them to different vectors compared to a lot of the data manipulation which I am more familiar with. 
```


3. What types of activities would you like to see in labs this semester?

```{r}
# I would be very interested to learn how to make interactive maps or web maps in R. I also have personal interest in raster data.


```






