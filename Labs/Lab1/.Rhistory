x = "Area of Land",
y = 'Area of Water')
d.counties %>%
ggplot(., aes(x=ALAND10, y=AWATER10))+
geom_point(aes(color = STATEFP10))+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Area of Land",
y = 'Area of Water')
d.counties %>%
ggplot(., aes(x=ALAND10, y=AWATER10))+
geom_point(aes(color = STATEFP10))+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Area of Land",
y = 'Area of Water',
fill = 'State FIPS')
d.counties %>%
ggplot(., aes(x=ALAND10, y=AWATER10))+
geom_point(aes(color = STATEFP10))+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Area of Land",
y = 'Area of Water',
color = 'State FIPS')
View(d.stations)
d.stations %>%
ggplot(., aes(y=Drainage_A))+
geom_histogram()+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Area of Land",
y = 'Area of Water',
color = 'State FIPS')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram()+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Area of Land",
y = 'Area of Water',
color = 'State FIPS')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(aes(color='purple'))+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Drainage Area",
y = 'Number of stations',
color = 'State FIPS')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(aes(fill='purple'))+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Drainage Area",
y = 'Number of stations',
color = 'State FIPS')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(aes(fill='red'))+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Drainage Area",
y = 'Number of stations',
color = 'State FIPS')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(aes(fill='green'))+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Drainage Area",
y = 'Number of stations',
color = 'State FIPS')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(aes(fill='red'))+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Drainage Area",
y = 'Number of stations',
color = 'State FIPS')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(aes(fill='red'))+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
subtitle = '',
x = "Drainage Area",
y = 'Number of stations')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(aes(fill='red'))+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations'
)
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(aes(fill='red'))+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations'
)
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram()+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(aes(fill=STATEFP10))+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(aes(fill = STATEFP10)) +
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations')
knitr::opts_chunk$set(echo = TRUE)
del.stations <- sf::st_intersection(d.stations, del.counties)
del.counties <- d.counties %>% dplyr::filter(STATEFP10 == 10)
del.stations <- sf::st_intersection(d.stations, del.counties)
del.counties %>% st_area()
View(del.stations)
Task3 <- function(){
Mean = mean()
Median = median()
Max = max()
Min = min()
}
knitr::opts_chunk$set(echo = TRUE)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
```
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
library(tidyverse)
library(ggplot2)
library(sf)
#name files
p.counties <- "./data/County_Boundaries.shp"
p.stations <- "./data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#Read files in sf package
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
# check for validity
d.stations %>% sf::st_is_valid()
d.counties %>% sf::st_is_valid() # returns false for one feature, so we need to fix
# fix it "in place"
d.counties <- d.counties %>% sf::st_make_valid()
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A))
View(Stations_Joined)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A))
sort_by(group)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A))
sort_by(AvgDrainArea)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
sort_by(AvgDrainArea)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A))
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
arrange(desc(AvgDrainArea))
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
arrange(desc(AvgDrainArea)) %>%
summarize(Drainage_A)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
arrange(desc(AvgDrainArea)) %>%
summarize(AvgDrainArea)
View(Stations_Joined)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
arrange(desc(AvgDrainArea)) %>%
summarize(COUNTYFP10)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
arrange(desc(AvgDrainArea)) %>%
head()
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
arrange(desc(AvgDrainArea)) %>%
head()
# State 42 (Pennsylvania) has the greatest average drainage area of 3583.61
max(AvgDrainArea)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
arrange(desc(AvgDrainArea)) %>%
head()
# State 42 (Pennsylvania) has the greatest average drainage area of 3583.61
Stations_Joined %>% max(AvgDrainArea)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
arrange(desc(AvgDrainArea)) %>%
max(AvgDrainArea)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
arrange(desc(AvgDrainArea)) %>%
max(., AvgDrainArea)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
group_by(STATEFP10) %>%
mutate(., AvgDrainArea = mean(Drainage_A)) %>%
arrange(desc(AvgDrainArea)) %>%
head()
# State 42 (Pennsylvania) has the greatest average drainage area of 3583.61
sf::st_intersection(d.stations, del.counties)
del.counties <- d.counties %>% dplyr::filter(STATEFP10 == 10)
sf::st_intersection(d.stations, del.counties)
sf::st_intersection(del.counties, d.stations)
knitr::opts_chunk$set(echo = TRUE)
## note the ".." as opposed to "." <- need to go back one additional level from where this file is
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.counties %>%
mutate(., CntyTotArea = ALAND10 + AWATER10) %>% #Find County total area
group_by(STATEFP10) %>% #Group by state to get statewide calculations
mutate(., StTotArea = sum(CntyTotArea)) %>% #Find state total area as a sum of all county areas in the state
mutate(., PcntLandArea = (ALAND10 / StTotArea)*100) %>% #Calculate land as a percentage of total area for the state
arrange(STATEFP10) #Arrange so that all the counties in the state are grouped together for easy viewing
d.counties %>%
mutate(., CntyTotArea = ALAND10 + AWATER10) %>% #Find County total area
group_by(STATEFP10) %>% #Group by state to get statewide calculations
mutate(., StTotArea = sum(CntyTotArea)) %>% #Find state total area as a sum of all county areas in the state
mutate(., PcntLandArea = (ALAND10 / StTotArea)*100) %>% #Calculate land as a percentage of total area for the state
arrange(STATEFP10) %>% #Arrange so that all the counties in each state are together for easy viewing
select(STATEFP10, COUNTYFP10, NAME10, CntyTotArea, StTotArea, PcntLandArea)
d.counties %>%
mutate(., TotArea = ALAND10 + AWATER10) %>% #Find total area of each county
mutate(., PropWater = (AWATER10 /TotArea)*100) %>% #Find Proportion water as a % for each county
group_by(STATEFP10) %>% #Group by state
slice_max(PropWater) %>% #Find max per each state
select(STATEFP10, NAME10, TOTAREA, PropWater) #Select necessary columns for viewing
d.counties %>%
mutate(., TotArea = ALAND10 + AWATER10) %>% #Find total area of each county
mutate(., PropWater = (AWATER10 /TotArea)*100) %>% #Find Proportion water as a % for each county
group_by(STATEFP10) %>% #Group by state
slice_max(PropWater) %>% #Find max per each state
select(STATEFP10, NAME10, TotArea, PropWater) #Select necessary columns for viewing
d.counties %>%
count(STATEFP10) %>% #Counts the occurrences of each State FIPS from the list of counties in column "n"
rename(Num_Counties = n)
d.stations %>%
mutate(., Name_Length = nchar(STATION_NA)) %>%
slice_min(Name_Length)
d.stations %>%
mutate(., Name_Length = nchar(STATION_NA)) %>% #Create new column that counts number of characters in each name
slice_min(Name_Length) %>% #Find the station with minimum name length (There's two with same length of 26)
select(STATION_NA, Name_Length)
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(bins = 50)+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(bins = 20)+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(bins = 30)+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(bins = 30, color = 'white', fill = 'purple')+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(bins = 30, color = 'white', fill = 'blue')+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(bins = 30, color = 'white', fill = 'blue')+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of Stations')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(fill = STATEFP10) +
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of stations')
d.stations %>%
ggplot(., aes(x=Drainage_A, fill = STATEFP10))+
geom_histogram(bins = 30, color = 'white', fill = 'blue')+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of Stations')
d.stations %>%
ggplot(., aes(x=Drainage_A, fill = STATEFP10))+
geom_histogram(bins = 30) +
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of Stations')
View(d.stations)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
#Code for initial loading of data from Lab 1 R markdown - Dr. Bitterman
#name files
p.counties <- "./data/County_Boundaries.shp"
p.stations <- "./data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#Read files in sf package
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
# check for validity
d.stations %>% sf::st_is_valid()
d.counties %>% sf::st_is_valid() # returns false for one feature, so we need to fix
# fix it "in place"
d.counties <- d.counties %>% sf::st_make_valid()
d.counties %>%
mutate(., CntyTotArea = ALAND10 + AWATER10) %>% #Find County total area
group_by(STATEFP10) %>% #Group by state to get statewide calculations
mutate(., StTotArea = sum(CntyTotArea)) %>% #Find state total area as a sum of all county areas in the state
mutate(., PcntLandArea = (ALAND10 / StTotArea)*100) %>% #Calculate land as a percentage of total area for the state
arrange(STATEFP10) %>% #Arrange so that all the counties in each state are together for easy viewing
select(STATEFP10, COUNTYFP10, NAME10, CntyTotArea, StTotArea, PcntLandArea) #Select only necessary columns to view
d.counties %>%
mutate(., TotArea = ALAND10 + AWATER10) %>% #Find total area of each county
mutate(., PropWater = (AWATER10 /TotArea)*100) %>% #Find Proportion water as a % for each county
group_by(STATEFP10) %>% #Group by state
slice_max(PropWater) %>% #Find max per each state
select(STATEFP10, NAME10, TotArea, PropWater) #Select necessary columns for viewing
d.counties %>%
count(STATEFP10) %>% #Counts the occurrences of each State FIPS from the list of counties in column "n"
rename(Num_Counties = n) #Renames column "n"  to explain it is number of counties
d.stations %>%
mutate(., Name_Length = nchar(STATION_NA)) %>% #Create new column that counts number of characters in each name
slice_min(Name_Length) %>% #Find the station with minimum name length (There's two with same length of 26)
select(STATION_NA, Name_Length) #Select necessary columns for viewing
d.counties %>%
ggplot(., aes(x=ALAND10, y=AWATER10))+
geom_point(aes(color = STATEFP10))+
theme_bw() +
labs(title = 'Land area compared to water area',
subtitle = 'County scale',
x = "Area of Land",
y = 'Area of Water',
color = 'State FIPS')
d.stations %>%
ggplot(., aes(x=Drainage_A))+
geom_histogram(bins = 30, color = 'white', fill = 'blue')+
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of Stations')
d.stations %>%
ggplot(., aes(x=Drainage_A, fill = STATEFP10))+
geom_histogram(bins = 30) +
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of Stations')
d.stations %>%
ggplot(., aes(x=Drainage_A, fill = STATEFP10))+
geom_histogram(bins = 30) +
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of Stations')
d.stations %>%
ggplot(., aes(x=Drainage_A, fill = STATEFP10))+
geom_histogram() +
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of Stations')
View(d.stations)
Stations_Joined <- st_join(d.stations, d.counties, join = st_intersects)
Stations_Joined %>%
ggplot(., aes(x=Drainage_A, fill = STATEFP10))+
geom_histogram() +
theme_bw() +
labs(title = 'Drainage area of water monitoring stations',
x = "Drainage Area",
y = 'Number of Stations')
#Function
Task3 <- function(Vectors){
if(is.numeric(Vectors) == TRUE)
{return(list(
Mean = mean(Vectors),
Median = median(Vectors),
Maximum = max(Vectors),
Minimum = min(Vectors),
Sorted = sort.default(Vectors)))}
else{
print("Error: Not numeric values")
}}
#List of the vectors to test the function on
Vectors <-list(
c(1, 0, -1),
c(10, 100, 1000),
c(.1, .001, 1e8),
c("a", "b", "c"))
#Apply the function across the list
Vectors %>% purrr::map(., Task3)
#Function
Task3 <- function(Vectors){
if(all(is.numeric(Vectors) == TRUE))
{return(list(
Mean = mean(Vectors),
Median = median(Vectors),
Maximum = max(Vectors),
Minimum = min(Vectors),
Sorted = sort.default(Vectors)))}
else{
print("Error: Not numeric values")
}}
#List of the vectors to test the function on
Vectors <-list(
c(1, 0, -1),
c(10, 100, 1000),
c(.1, .001, 1e8),
c("a", "b", "c"))
#Apply the function across the list
Vectors %>% purrr::map(., Task3)
#Function
Task3 <- function(Vectors){
if(is.numeric(Vectors) == TRUE)
{return(list(
Mean = mean(Vectors),
Median = median(Vectors),
Maximum = max(Vectors),
Minimum = min(Vectors),
Sorted = sort.default(Vectors)))}
else{
print("Error: Not numeric values")
}}
#List of the vectors to test the function on
Vectors <-list(
c(1, 0, -1),
c(10, 100, 1000),
c(.1, .001, 1e8),
c("a", "b", "c"))
#Apply the function across the list
Vectors %>% purrr::map(., Task3)
