knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(terra)
library(tidyterra)
library(tmap)
oh_streams <- read_sf("./ohio/ohio_rivers.gpkg")
oh_streams %>% sf::st_crs()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(terra)
library(tidyterra)
library(tmap)
oh_streams <- read_sf("./ohio/ohio_rivers.gpkg")
oh_streams <- read_sf("../ohio/ohio_rivers.gpkg")
oh_streams <- read_sf("./ohio/ohio_rivers.gpkg")
oh_streams %>% sf::st_crs()
tm_shape(oh_streams) + tm_lines()
oh_counties <- read_sf("../data/ohio/oh_counties.gpkg")
oh_counties <- read_sf("./data/ohio/oh_counties.gpkg")
oh_counties <- read_sf("./ohio/oh_counties.gpkg")
oh_counties %>% glimpse()
counties_areas <- oh_counties %>% sf::st_area()
portage <- oh_counties %>% dplyr::filter(., NAME == "Portage")
portage %>% tm_shape(.) + tm_polygons()
port.summit <- oh_counties %>% dplyr::filter(., NAME == "Portage" | NAME == "Summit")
# what counties do I want?
# Make a simple vector
mycounties <- c("Portage", "Summit", "Lake", "Cuyahoga", "Geauga")
# then do the filter. Note the %in% notation. How do you think this works???
study.area <- oh_counties %>% dplyr::filter(., NAME %in% mycounties)
study.area %>% tm_shape(.) + tm_polygons(fill = "NAME")
streams.303d <- oh_streams %>% dplyr::filter(., on303dlist == "Y")
# It would make more sense if they used a logical (T/F) rather than Y/N, but I didn't create the data
study.streams <- sf::st_intersection(streams.303d, study.area)
st_crs(study.area)
st_crs(oh_streams)
# they're not the same, so we need to reproject them into a common CRS...
# The 6346 is an EPSG code (see: https://epsg.io) for a UTM 16N CRS
# let's reproject this one first
# ... or in `sf` parlance, "transform" it
study.area_p <- sf::st_transform(study.area, 6346)
# we COULD (and maybe should) use a similar command to reproject the streams file too.
#But let's do something a bit different/crazy just to show what's possible
# Before you run this next line, break down what it does FIRST. It's definitely non-traditional
study.area_p %>% st_crs() %>% sf::st_transform(study.area, .) -> oh_streams_p
# Now, while the above line technically works, it's not very readable,
# and an example of "just because you can, doesn't mean you should"
# something like this is probably better
oh_streams_p <- study.area_p %>% st_crs() %>% sf::st_transform(oh_streams, .)
# unprojected areas
areas.unproj <- study.area %>% sf::st_area()
# projected areas
areas.proj <- study.area_p %>% sf::st_area()
# note that they're both in meters
# test for equality
areas.unproj == areas.proj
# test of differences
areas.unproj - areas.proj
# differences as a percent of original
100 * (areas.unproj - areas.proj) / areas.unproj
# not a MASSIVE difference, but can still introduce error
study.streams <- sf::st_intersection(oh_streams_p, study.area_p)
tm_shape(study.streams) + tm_lines()
tm_shape(study.area_p) + tm_polygons(fill = "NAME") +
tm_shape(study.streams) + tm_lines(col = "red") # this colors the lines based on a color we gave it (red)
tm_shape(study.area_p) + tm_polygons(fill = "NAME") +
tm_shape(study.streams) + tm_lines(col = "assessmentunitname") # this colors the lines based on a variable in the dataset
buffs <- sf::st_buffer(study.streams, dist = 1000)
tm_shape(buffs) + tm_polygons(fill = "assessmentunitname")
oh_parks_shp <- read_sf("./ohio/ohio_parks.shp")
oh_parks <- read_sf("./ohio/oh_parks.gpkg")
View(oh_parks_shp)
View(oh_parks)
oh_parks_p <-  sf::st_transform(oh_parks, 6346)
oh_parks_p_studyarea <- sf::st_intersection(oh_parks_p, study.area_p)
tm_shape(oh_parks_p_studyarea) + tm_polygons(fill = "FEATTYPE")
tm_shape(study.area_p) + tm_polygons(fill = "NAME") +
tm_shape(oh_parks_p_studyarea) + tm_polygons(fill = "FEATTYPE", palette = "brewer.dark2") +
tm_shape(study.streams) + tm_lines(col = "red")
## Perhaps a bit on the ugly side, but it gets the point across
sf::st_distance(study.streams, oh_parks_p_studyarea)
sf::st_distance(study.streams, oh_parks_p_studyarea) %>% as_tibble()
